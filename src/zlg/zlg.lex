%{

#include <cstdio>
#include <cstdlib>
#include <zlg.h>
#include <zlgy.gen.hpp>  /* Generated by bison. */

#define YY_USER_ACTION \
    yylloc->first_line = yylloc->last_line = yylineno; \
    yylloc->first_column = yycolumn; yylloc->last_column = yycolumn + yyleng - 1; \
    yycolumn += yyleng;

#define YY_NO_UNISTD
    
%}


%option noyywrap reentrant
%option bison-bridge bison-locations
%option yylineno 8bit

%x INLINE

%%

<INITIAL>{

\%                        { BEGIN(INLINE);}
[\(\)\[\]\{\}\*\/\n]      { return yytext[0];}
_[[:blank:]]*             { return ZPREV; }
[+-]                      { return yytext[0]; }
[=]                       { return '='; }
fun[[:blank:]]            { return ZFUN; }
end[[:blank:]]            { return ZEND; }
result[[:blank:]]         { return ZRESULT; }
byte[[:blank:]]           { return ZBYTE; }
short[[:blank:]]          { return ZSHORT; }
long[[:blank:]]           { return ZLONG; }
quad[[:blank:]]           { return ZQUAD; }
print[[:blank:]]          { return ZPRINT; }
[[:digit:]]+              { yylval->value = atoi(yytext); return ZNUMBER;}
[_[:alpha:]][_[:alnum:]]* { yylval->text.assign(yytext); return ZSTRING;}
[$][[:alnum:]]            { yylval->text.assign(yytext); return ZREG;}
[[:blank:]]*              { }
.                         { }

}

<INLINE>{

\%                   { fprintf(stderr, "\"%s\"\n", yytext); BEGIN(INITIAL); }
[^%]*                { fprintf(stderr, "\"%s\"\n", yytext); yylval->text.assign(yytext); return ZINLINE; }

}


%%

void yyerror(YYLTYPE* loc, void* scanner, zlg::ast& root, const char * err){
    fprintf(stderr, "%d: %d: %s: %s\n", loc->first_line, loc->first_column, "ERROR", err);
    exit(1);
}