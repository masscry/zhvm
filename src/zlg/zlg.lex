%{

#include <cstdio>
#include <cstdlib>
#include <zlg.h>
#include <zlgy.gen.hpp>  /* Generated by bison. */

#define YY_USER_ACTION \
    yylloc->first_line = yylloc->last_line = yylineno; \
    yylloc->first_column = yycolumn; yylloc->last_column = yycolumn + yyleng - 1; \
    yycolumn += yyleng;
%}

%option noyywrap reentrant
%option bison-bridge bison-locations
%option yylineno

%x INLINE

%%

<INITIAL>{

\%                   { BEGIN(INLINE);}
\(                   { return '(';}
\)                   { return ')';}
\[                   { return '[';}
\]                   { return ']';}
\{                   { return '{';}
\}                   { return '}';}
\*                   { return '*'; }
\/                   { return '/'; }
\n                   { return '\n'; }
_                    { return ZPREV; }
[+-]                 { return yytext[0]; }
fun[[:space:]]       { return ZFUN; }
end[[:space:]]       { return ZEND; }
result[[:space:]]    { return ZRESULT; }
byte[[:space:]]      { return ZBYTE; }
short[[:space:]]     { return ZSHORT; }
long[[:space:]]      { return ZLONG; }
quad[[:space:]]      { return ZQUAD; }
print[[:space:]]     { return ZPRINT; }
[[:digit:]]+         { yylval->value = atoi(yytext); return ZNUMBER;}
[a-zA-Z][a-zA-Z0-9]* { yylval->text.assign(yytext); return ZSTRING;}
[$][a-zA-Z0-9]       { yylval->text.assign(yytext); return ZREG;}
[[:space:]]*         {}
.                    {}

}

<INLINE>{

\%                   { BEGIN(INITIAL); }
[^%]*                { yylval->text.assign(yytext); return ZINLINE; }

}


%%

void yyerror(YYLTYPE* loc, void* scanner, zlg::ast& root, const char * err){
    fprintf(stderr, "%d: %d: %s: %s\n", loc->first_line, loc->first_column, "ERROR", err);
    exit(1);
}