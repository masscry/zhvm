{
  "name": "Zhvm",
  "tagline": "Simple register based RISC virtual machine with 32-bit code and 64-bit registers and its infrastructure (assembler, compiler, debugger, etc)",
  "body": "ZH Virtual Machine\r\n==================\r\n\r\nOverview\r\n--------\r\n\r\nZHVM - is a registers based RISC virtual machine with 32-bit code length\r\nand 64-bit registers.\r\n\r\n\r\nRequirements\r\n------------\r\n\r\nZHVM based on standard C library and STL.\r\n\r\nProject structure\r\n-----------------\r\n\r\nZHVM consists of two parts:\r\n\r\n* libzhvm.a - library implements VM and assembler\r\n* libzyaml.a - library implements JSON/YAML parsing\r\n* repl - Read-Eval-Print-Loop application to work with ZHVM \r\n* cmplv2 - Standalone ZHVM assembler\r\n\r\nCompilation\r\n-----------\r\n\r\nZHVM project requires CMake 3.0 to be built.\r\n\r\nExamples\r\n--------\r\n\r\nThere are some ZHVM code examples in ${SOURCE_DIRECTORY}/share.\r\n\r\n* test-001.zsf - simple consters program\r\n* test-002.zsf - fibbonachi numbers calculator\r\n* test-003.zsf - simple function invocation \r\n\r\nCommand structure\r\n-----------------\r\n\r\nVM process 32-bit commands. Each command encodes operation code, two source \r\nregisters, one destination register and 14-bit immediate constant.\r\n\r\nRegisters\r\n---------\r\n\r\nVM has 15+1 general usage registers:\r\n\r\n* RZ - Zero register. Always return zero, even if non-zero value was written\r\n* RA - A(ccumulator) register.\r\n* RB - B(ase) register.\r\n* RC - C(ounter) register.\r\n* R0-R8 - Argument registers.\r\n* RS - S(tack) top register.\r\n* RD - D(ata) register.\r\n* RP - P(rogram) pointer. Incremented by 4 bytes each cycle.\r\n\r\nAny register can be used in any operation, but RP and RZ have special meaning.\r\n\r\nOperation codes\r\n---------------\r\n\r\nVM uses 6-bit operation code length, which can be used to code 64 commands.\r\n\r\nCurrent VM version has several reserved for future use codes. If any of reserved\r\ncodes are found, VM halts with error.\r\n\r\nValid operation codes:\r\n\r\n* hlt - halt vm.\r\n* add - add two numbers. [$d = $s0 + ($s1 + imm)]\r\n* sub - substract two numbers. [$d = $s0 - ($s1 + imm)]\r\n* mul - two numbers multiplications. [$d = $s0 * ($s1 + imm)]\r\n* div - two numbers division. [$d = $s0 / ($s1 + imm)]\r\n* mod - two numbers division remainder. [$d = $s0 % ($s1 + imm)]\r\n* cmz - conditional move zero. [if ($s0 == 0) $d = ($s1 + imm)]\r\n* cmn - conditional move non-zero. [if ($s0 != 0) $d = ($s1 + imm)]\r\n* ldb - load 1-byte.  [$d = mem[S0] + S1 + imm] \r\n* lds - load 2-bytes. [$d = mem[S0] + S1 + imm] \r\n* ldl - load 4-bytes. [$d = mem[S0] + S1 + imm]\r\n* ldq - load 8-bytes. [$d = mem[S0] + S1 + imm]\r\n* svb - store 1-byte. [mem[$d] = S0 + S1 + imm]\r\n* svs - store 2-bytes. [mem[$d] = S0 + S1 + imm]\r\n* svl - store 4-bytes. [mem[$d] = S0 + S1 + imm]\r\n* svq - store 8-bytes. [mem[$d] = S0 + S1 + imm]\r\n* and - bitwise and. [$d = $s0 & ($s1 + imm)]\r\n* or  - bitwise or. [$d = $s0 | ($s1 + imm)]\r\n* xor - bitwise xor. [$d = $s0 ^ ($s1 + imm)]\r\n* gr - is greater. [$d = $s0 > ($s1 + imm)]\r\n* ls - is less. [$d = $s0 < ($s1 + imm)]\r\n* gre - is greater or equal. [$d = $s0 >= ($s1 + imm)]\r\n* lse - is less or equal. [$d = $s0 <= ($s1 + imm)]\r\n* eq - is equal. [$d = $s0 == ($s1 + imm)]\r\n* neq - is not equal. [$d = $s0 != ($s1 + imm)]\r\n* ccl - call c-func. [cfuncs[$s0 + $s1 + imm]()]\r\n* nop - do nothing.\r\n\r\nC functions\r\n-----------\r\n\r\nC functions can be called from VM. Current implementation expects that only 16 \r\nfunction available.\r\n\r\nStandard functions: \r\n\r\n1. print RA to console. [`ccl[,0]`]\r\n2. scan from console to RA. [`ccl[,1]`]\r\n\r\nVM image structure\r\n------------------\r\n\r\nZHVM image starts with 12 bytes header:\r\n\r\n* [4 bytes] Magic number. [0xD0FA5534] \r\n* [4 bytes] VM version. [current and only version is 2]\r\n* [4 bytes] VM image byte length. [actual VM image length without header footer]\r\n\r\nImmediatly after follows the very body of VM image.\r\n\r\nAfter image body sdbm hash of header and body are saved.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}